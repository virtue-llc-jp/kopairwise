/*
 * This source file was generated by the Gradle 'init' task
 */
package llc.virtue.kopairwise

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class PairwiseTest {
    enum class OS { Windows, MacOS, Linux }
    enum class Browser { Chrome, Firefox, Safari }
    enum class Locale { en_US, ja_JP, fr_FR }

    private val factors = listOf(
        Factor(OS::class),
        Factor(Browser::class),
        Factor(Locale::class)
    )

    private val constraints = listOf(
        "OS" eq OS.Windows implies ("browser" inSet listOf(Browser.Chrome, Browser.Firefox)),
        "OS" eq OS.Linux implies ("browser" inSet listOf(Browser.Chrome, Browser.Firefox)),
        "locale" neq Locale.fr_FR and ("browser" notInSet listOf(Browser.Safari))
    )

    @Test
    fun testInitializeUncoveredPairs() {
        val result = initializeUncoveredPairs(factors, listOf())
        assertEquals(3, result.size, "$result")
        for ((factorPair, levelPairs) in result) {
            assertEquals(9, levelPairs.size, "$levelPairs")
        }
    }

    @Test
    fun testNoConstraints() {
        val result = generatePairwise(factors, listOf())
        assertEquals(10, result.size, "$result")
    }

    @Test
    fun testSimple() {
        val result = generatePairwise(factors, constraints)
        assertEquals(6, result.size, "$result")
        for (testCase in result) {
            constraints.map {
                assertTrue("$testCase is not compliant.") { it(testCase) }
            }
        }
    }
}
